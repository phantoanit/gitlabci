appUser = "shoeshop"
appName = "shoe-ShoppingCart"
appVersion = "0.0.1-SNAPSHOT"
appType = "jar"
processName = "${appName}-${appVersion}.${appType}"
folderDeploy = "/datas/${appUser}/run"
folderBackup = "/datas/${appUser}/backups"
folderMain = "/datas/${appUser}"
buildScript = "mvn clean install -DskipTests=true"
copyScript = "sudo cp target/${processName} ${folderDeploy}"
permsScript = "sudo chown -R ${appUser}. ${folderDeploy}"
runScript = "sudo su ${appUser} -c 'cd ${folderDeploy}; java -jar ${processName} > nohup.out 2>&1 &'"
gitLink = "http://git.elroydevops.tech/shoeshop/shoeshop.git"

def getProcessId(processName) {
    def processId = sh(returnStdout:true, script: """ ps -ef| grep ${processName}| grep -v grep| awk \'{print \$2}\' """, label: "get processId")
}

def startProcess() {
    stage('start') {
        sh(script: """ ${runScript} """, label: "run the project")
        sleep 5
        def processId = getProcessId("${processName}")
        if ("${processId}" == "")
            error("Cannot start process")
    }
    echo("${appName} with server " + params.server + " started")
}

def stopProcess() {
    stage('stop') {
        def processId = getProcessId("${processName}")
        if ("${processId}" != "")
            sh(script: """ sudo kill -9 ${processId} """, label: "kill process")
        echo("${appName} with server " + params.server + " stopped")
    }
}

def upcodeProcess() {
    stage('checkout') {
        if (params.hash == "")
            error("require hashing for code update.")
        checkout([$class: 'GitSCM', branches: [[ name: params.hash ]],
            userRemoteConfigs: [[ credentialsId: 'jenkins-gitlab-user-account', url: gitLink ]]])
    }
    stage('build') {
        sh(script: """ ${buildScript} """, label: "build with maven")
    }
    stage('config') {
        sh(script: """ ${copyScript} """, label: "copy .jar file into the deploy folder")
        sh(script: """ ${permsScript} """, label: "assign project permissions")
    }
}

def backupProcess() {
    stage('backup') {
        // shoe-ShoppingCart_03022024_1011.zip
        def timeStamp = new Date().format("ddMMyyyy_HHmm")
        def zipFileName = "${appName}_${timeStamp}" + ".zip"
        sh(script: """ sudo su ${appUser} -c "cd ${folderMain};zip -jr ${folderBackup}/${zipFileName} ${folderDeploy}"  """, label: "backup old version")
    }
}

def rollbackProcess() {
    stage('rollback') {
        sh(script: """ sudo su ${appUser} -c "cd ${folderDeploy};rm -rf *"  """, label: "delete the current version")
        sh(script: """ sudo su ${appUser} -c "cd ${folderBackup};unzip ${params.rollback_version} -d ${folderDeploy}" """, label: "rollback process")
    }
}

node(params.server) {
    currentBuild.displayName = params.action
    if (params.action == "start") {
        startProcess()
    }
    if (params.action == "stop") {
        stopProcess()
    }
    if (params.action == "upcode") {
        currentBuild.description = "server " + params.server + " with hash " + params.hash
        backupProcess()
        stopProcess()
        upcodeProcess()
        startProcess()
    }
    if (params.action == "rollback") {
        stopProcess()
        rollbackProcess()
        startProcess()
    }
}

## khai bao parameter rollback_version: active choice parameter, khi cau hinh pipe job
import jenkins.model.*
import hudson.FilePath

backupPath = "/datas/shoeshop/backups/"
def node = Jenkins.getInstance().getNode(server)
def remoteDir = new FilePath(node.getChannel(), "${backupPath}")

def files = remoteDir.list()
def nameFile = files.collect { it.name }

if (action == "rollback") {
    return nameFile
}

## khai bao Referenced parameters da su dung ben trong
# nhap vao input
server, action

## mau cau hinh pipeline cho du an react
appUser = "shopnow"
appName = "shopnow"
appVersion = "0.0.1-SNAPSHOT"
appType = "html"
processName = "scripts/start.js"
folderDeploy = "/home/${appName}/run"
folderBackup = "/home/${appName}/backups"
folderMain = "/home/${appName}"
installScript = "sudo su ${appUser} -c 'cd ${folderDeploy}; npm install'"
buildScript = "cd ${folderDeploy}; npm run build"
copyScript = "sudo cp -r * ${folderDeploy}"
permsScript = "sudo chown -R ${appUser}. ${folderDeploy}"
runScript = "sudo su ${appUser} -c 'cd ${folderDeploy}; npm run start > nohup.out 2>&1 &'"
gitLink = "https://gitlab.toandevops.click/shopnow/frontend.git"

// CI_PROJECT_NAME = sh(script: "git remote show origin -n | grep Fetch | cut -d'/' -f5 | cut -d'.' -f1", returnStdout: true).trim()
CI_PROJECT_NAME = "frontend"
// def CI_COMMIT_HASH = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
// def CI_COMMIT_SHORT_SHA = CI_COMMIT_HASH.take(8)
// def CI_COMMIT_TAG = sh(script: "git describe --tags --exact-match ${CI_COMMIT_HASH}", returnStdout: true).trim()
IMAGE_VERSION = "${CI_PROJECT_NAME}:" + params.hash.take(8)
// def CURRENT_DIR = sh(script: 'pwd', returnStdout: true).trim()


def getProcessId(processName) {
    def processId = sh(returnStdout:true, script: """ ps -ef| grep ${processName}| grep -v grep| awk \'{print \$2}\' """, label: "get processId")
}

def startProject() {
    
    stage('start') {
        sh(script: """ ${installScript} """, label: "install project")
        sh(script: """ ${runScript} """, label: "run the project")
        sleep 5
        def processId = getProcessId("${processName}")
        if ("${processId}" == "")
            error("Cannot start process")
    }
    echo("${appName} with server " + params.server + " started")
}

def stopProject() {
    stage('stop') {
        def processId = getProcessId("${processName}")
        if ("${processId}" != "")
            sh(script: """ sudo su ${appUser} -c 'kill -9 ${processId}' """, label: "kill process")
        echo("${appName} with server " + params.server + " stopped")
    }
}

def upcodeProcess() {
    stage('checkout') {
        if (params.hash == "")
            error("require hashing for code update.")
        checkout([$class: 'GitSCM', branches: [[ name: params.hash ]],
            userRemoteConfigs: [[ credentialsId: 'jenkins user pass', url: gitLink ]]])
    }
    
    stage('config') {
        sh(script: "rm -r node_modules/ || true", label: "remove node module")
        sh(script: """ ${copyScript} """, label: "copy file into the deploy folder")
        sh(script: """ ${permsScript} """, label: "assign project permissions")
    }
    stage('build') {
        sh(script: """ ${installScript} """, label: "install package")
        // sh(script: """ ${buildScript} """, label: "build with node")
    }
}

def backupProcess() {
    stage('backup') {
        // shoe-ShoppingCart_03022024_1011.zip
        def timeStamp = new Date().format("ddMMyyyy_HHmm")
        def zipFileName = "${appName}_${timeStamp}" + ".zip"
        sh(script: "sudo su ${appUser} -c 'rm -r ${folderDeploy}/node_modules/ ${folderDeploy}/build/ || true'", label: "remove node module")
        sh(script: """ sudo su ${appUser} -c "cd ${folderMain};zip -r ${zipFileName} ${folderDeploy}; mv ${zipFileName} ${folderBackup} || true"  """, label: "backup old version")
    }
}

def rollbackProcess() {
    stage('rollback') {
        sh(script: """ sudo su ${appUser} -c "cd ${folderDeploy};rm -rf *"  """, label: "delete the current version")
        sh(script: """ sudo su ${appUser} -c "cd ${folderBackup};unzip ${params.rollback_version} -d /" """, label: "rollback process")
    }
}

node(params.server) {
    currentBuild.displayName = params.action
    if (params.action == "start") {
        startProject()
    }
    if (params.action == "stop") {
        stopProject()
    }
    if (params.action == "upcode") {
        currentBuild.description = "server " + params.server + " with hash " + params.hash
        if (params.hash == "")
            error("require hashing for code update.")
        backupProcess()
        stopProject()
        upcodeProcess()
        startProject()
    }
    if (params.action == "rollback") {
        stopProject()
        rollbackProcess()
        startProject()
    }
}
