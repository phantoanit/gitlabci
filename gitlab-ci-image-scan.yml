variables:
    ZIP_VERSION: $CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-$CI_COMMIT_TAG.zip
    IMAGE_VERSION: $CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA-$CI_COMMIT_TAG
    CODECLIMATE_FILE: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_codeclimate"
    SNYKSCAN_FILE: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_snykscan"
    TRIVY_IMAGE_REPORT: "security_scan_image_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
stages:
    - build
    - test
    - security scan image
    - deploy

build:
    stage: build
    variables:
        GIT_STRATEGY: clone
    script:
        - npm run prod --mode=raovat;
        - docker build -t $IMAGE_VERSION .
    tags:
        - vatgia-runner-dev-shell
    only:
        - tags

snykscan:
    stage: test
    variables:
        GIT_STRATEGY: clone
    script:
        - echo ""
    tags:
        - vatgia-runner-dev-shell
    only:
        - tags
    artifacts:
        paths:
        - $SNYKSCAN_FILE.html
        expire_in: 1 day

trivy scan image:
    stage: security scan image
    variables:
        GIT_STRATEGY: none
    script:
        - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format template --template "@contrib/html.tpl" --output /${CI_PROJECT_NAME}/${TRIVY_IMAGE_REPORT}.html $IMAGE_VERSION
    tags:
        - vatgia-runner-dev-shell
    only:
        - tags
    artifacts:
        paths:
        - ${TRIVY_IMAGE_REPORT}.html
        expire_in: 1 day

deploy:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - sudo su phantoanit -c "docker rm -f $CI_PROJECT_NAME; docker run --name $CI_PROJECT_NAME -dp $VG_PORT $IMAGE_VERSION"
    tags:
        - vatgia-runner-dev-shell
    only:
        - tags
  
   
